import { useState } from "react";
import { Send, Paperclip, Bot, User, Loader2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { useChatHistory } from "@/hooks/useChatHistory";
import { useAuth } from "@/hooks/useAuth";
import { QazCloudLogo } from "@/components/ui/qazcloud-logo";
import { ArrowRight } from "lucide-react";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
export default function Chat() {
  const [inputMessage, setInputMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const {
    user
  } = useAuth();
  const {
    chatSessions,
    currentSessionId,
    getCurrentSession,
    createNewChat,
    addMessage
  } = useChatHistory();
  const getUserName = () => {
    if (user?.user_metadata?.full_name) {
      return user.user_metadata.full_name.split(' ')[0];
    }
    if (user?.email) {
      return user.email.split('@')[0];
    }
    return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
  };
  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return;
    let sessionId = currentSessionId;

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!sessionId) {
      sessionId = createNewChat(inputMessage);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (sessionId) {
      addMessage(sessionId, inputMessage, true);
      setInputMessage("");
      setIsLoading(true);

      // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ AI
      setTimeout(() => {
        const aiResponses = ["–ü–æ–Ω—è—Ç–Ω–æ! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º. –ö–∞–∫—É—é –∏–º–µ–Ω–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å?", "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç.", "–Ø –æ–±—Ä–∞–±–æ—Ç–∞–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É...", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∑–∞–¥–∞—á–∞! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ –ø–æ—à–∞–≥–æ–≤–æ.", "–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ, —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é —ç—Ç–æ–π –∑–∞–¥–∞—á–∏."];
        const randomResponse = aiResponses[Math.floor(Math.random() * aiResponses.length)];
        addMessage(sessionId!, randomResponse, false);
        setIsLoading(false);
      }, 1000 + Math.random() * 2000);
    }
  };
  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };
  const currentMessages = getCurrentSession()?.messages || [];
  return <div className="h-screen flex flex-col">
      {/* Main Chat Area */}
      <div className="flex-1 flex flex-col">
        {/* Chat Messages */}
        <div className="flex-1 overflow-hidden">
          <ScrollArea className="h-full">
            <div className="max-w-4xl mx-auto px-6 py-8">
              {currentMessages.length === 0 ? <div className="flex flex-col items-center justify-center h-full min-h-[60vh] space-y-8">
                  {/* Welcome Message */}
                  <div className="text-center space-y-4">
                    <h1 className="text-3xl font-bold text-foreground">
                      –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
                    </h1>
                  </div>

                  {/* Chat Input */}
                  <div className="w-full max-w-4xl">
                    <div className="flex gap-3 items-end">
                      {/* File Upload Button */}
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="outline" size="icon" className="flex-shrink-0">
                            <Paperclip className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="start" className="w-48">
                          <DropdownMenuItem>
                            üìÅ My Drive
                          </DropdownMenuItem>
                          <DropdownMenuItem>
                            üìé Upload File
                          </DropdownMenuItem>
                          <DropdownMenuItem>
                            üì∑ Take a photo
                          </DropdownMenuItem>
                          <DropdownMenuItem>
                            üé¨ Sample Media
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>

                      {/* Text Input */}
                      <div className="flex-1 relative">
                        <Textarea value={inputMessage} onChange={e => setInputMessage(e.target.value)} onKeyPress={handleKeyPress} placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..." className="min-h-[50px] max-h-[150px] resize-none pr-12" rows={1} disabled={isLoading} />
                      </div>

                      {/* Send Button */}
                      <Button onClick={handleSendMessage} disabled={!inputMessage.trim() || isLoading} size="icon" className="flex-shrink-0">
                        <Send className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>

                  {/* Helpful Suggestions */}
                  <div className="w-full max-w-4xl mt-8">
                    <div className="space-y-4">
                      <h2 className="text-lg font-medium text-center text-muted-foreground">
                        –ü–æ–¥—Å–∫–∞–∑–∫–∏
                      </h2>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                        {[
                          {
                            title: "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É",
                            icon: "üìÑ",
                            prompt: "–ü–æ–º–æ–≥–∏ –º–Ω–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"
                          },
                          {
                            title: "–ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                            icon: "üé§",
                            prompt: "–ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ?"
                          },
                          {
                            title: "–ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                            icon: "üí∞",
                            prompt: "–ù—É–∂–Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
                          },
                          {
                            title: "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
                            icon: "‚öñÔ∏è",
                            prompt: "–¢—Ä–µ–±—É–µ—Ç—Å—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"
                          },
                          {
                            title: "HR –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
                            icon: "üë•",
                            prompt: "–ù—É–∂–Ω–∞ HR –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
                          }
                        ].map((suggestion, index) => (
                          <div
                            key={index}
                            className="p-4 rounded-xl border border-border/50 hover:border-primary/30 hover:bg-muted/30 transition-all duration-200 cursor-pointer shadow-sm hover:shadow-md"
                            onClick={() => {
                              setInputMessage(suggestion.prompt);
                            }}
                          >
                            <div className="flex items-center gap-3">
                              <span className="text-2xl">{suggestion.icon}</span>
                              <span className="font-medium text-sm">{suggestion.title}</span>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </div> : <div className="space-y-6">
                  {currentMessages.map(message => <div key={message.id} className={`flex gap-4 ${message.isUser ? "justify-end" : "justify-start"}`}>
                      {!message.isUser && <Avatar className="h-8 w-8 mt-1">
                          <AvatarFallback className="bg-gradient-to-r from-primary to-primary/80 text-primary-foreground">
                            <Bot className="h-4 w-4" />
                          </AvatarFallback>
                        </Avatar>}
                      
                      <div className={`max-w-[80%] rounded-lg px-4 py-3 ${message.isUser ? "bg-primary text-primary-foreground ml-auto" : "bg-muted"}`}>
                        <p className="text-sm whitespace-pre-wrap">{message.content}</p>
                        <div className="mt-2">
                          <span className="text-xs opacity-70">
                            {message.timestamp.toLocaleTimeString([], {
                        hour: '2-digit',
                        minute: '2-digit'
                      })}
                          </span>
                        </div>
                      </div>

                      {message.isUser && <Avatar className="h-8 w-8 mt-1">
                          <AvatarFallback className="bg-secondary">
                            <User className="h-4 w-4" />
                          </AvatarFallback>
                        </Avatar>}
                    </div>)}
                  
                  {isLoading && <div className="flex gap-4 justify-start">
                      <Avatar className="h-8 w-8 mt-1">
                        <AvatarFallback className="bg-gradient-to-r from-primary to-primary/80 text-primary-foreground">
                          <Bot className="h-4 w-4" />
                        </AvatarFallback>
                      </Avatar>
                      <div className="bg-muted rounded-lg px-4 py-3">
                        <div className="flex items-center gap-2">
                          <Loader2 className="h-4 w-4 animate-spin" />
                          <span className="text-sm text-muted-foreground">AI –¥—É–º–∞–µ—Ç...</span>
                        </div>
                      </div>
                    </div>}
                </div>}
            </div>
          </ScrollArea>
        </div>

        {/* Chat Input - only show when there are messages */}
        {currentMessages.length > 0 && <div className="border-t bg-background">
            <div className="max-w-4xl mx-auto p-6">
              <div className="flex gap-3 items-end">
                {/* File Upload Button */}
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="outline" size="icon" className="flex-shrink-0">
                      <Paperclip className="h-4 w-4" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="start" className="w-48">
                    <DropdownMenuItem>
                      üìÅ My Drive
                    </DropdownMenuItem>
                    <DropdownMenuItem>
                      üìé Upload File
                    </DropdownMenuItem>
                    <DropdownMenuItem>
                      üì∑ Take a photo
                    </DropdownMenuItem>
                    <DropdownMenuItem>
                      üé¨ Sample Media
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>

                {/* Text Input */}
                <div className="flex-1 relative">
                  <Textarea value={inputMessage} onChange={e => setInputMessage(e.target.value)} onKeyPress={handleKeyPress} placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..." className="min-h-[50px] max-h-[150px] resize-none pr-12" rows={1} disabled={isLoading} />
                </div>

                {/* Send Button */}
                <Button onClick={handleSendMessage} disabled={!inputMessage.trim() || isLoading} size="icon" className="flex-shrink-0">
                  <Send className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </div>}
      </div>
    </div>;
}