import { useState, useMemo, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Search, Clock, MessageSquare, Trash2, Star, StarOff, FileText, Mic, Bot, User, MessageCircle, MoreVertical } from "lucide-react";
import { useChatHistory } from "@/hooks/useChatHistory";
import { formatDistanceToNow } from 'date-fns';
import { ru } from 'date-fns/locale';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { useNavigate } from "react-router-dom";

export default function History() {
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedFilter, setSelectedFilter] = useState("all");
  const { chatSessions, setCurrentSessionId, deleteSession, createNewChat, addMessage } = useChatHistory();
  const navigate = useNavigate();

  // Mock starred sessions for demo
  const [starredSessions, setStarredSessions] = useState<Set<string>>(new Set());

  // Add example conversations if empty
  useEffect(() => {
    const sessions = Object.values(chatSessions);
    if (sessions.length === 0) {
      // Create example HR bot conversation
      const hrSessionId = createNewChat("–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –æ—Ç–ø—É—Å–∫ –≤ –°–∞–º—Ä—É–∫-–ö–∞–∑—ã–Ω–∞?");
      addMessage(hrSessionId, "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –æ—Ç–ø—É—Å–∫ –≤ –°–∞–º—Ä—É–∫-–ö–∞–∑—ã–Ω–∞?", true);
      addMessage(hrSessionId, "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞ –≤ –°–∞–º—Ä—É–∫-–ö–∞–∑—ã–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n1. –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –∑–∞ 2 –Ω–µ–¥–µ–ª–∏\n2. –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º\n3. –£–≤–µ–¥–æ–º–∏—Ç—å HR –æ—Ç–¥–µ–ª\n4. –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞", false);

      // Create example document analysis conversation
      const docSessionId = createNewChat("–ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ Q3");
      addMessage(docSessionId, "üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç", true);
      addMessage(docSessionId, "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç...\n\n–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ Q3:\n‚Ä¢ –í—ã—Ä—É—á–∫–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ 15%\n‚Ä¢ –ü—Ä–∏–±—ã–ª—å —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –Ω–∞ 8%\n‚Ä¢ ROE —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 12.5%\n\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: —É–≤–µ–ª–∏—á–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ R&D", false);

      // Create example audio transcription conversation
      const audioSessionId = createNewChat("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ–≤–µ—â–∞–Ω–∏—è");
      addMessage(audioSessionId, "üé§ –ê—É–¥–∏–æ—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: meeting_record.mp3", true);
      addMessage(audioSessionId, "üéØ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüìù –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–≤–µ—â–∞–Ω–∏—è:\n‚Ä¢ –û–±—Å—É–∂–¥–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ 2024 –≥–æ–¥\n‚Ä¢ –ü–ª–∞–Ω—ã –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é –≤ —Ä–µ–≥–∏–æ–Ω—ã\n‚Ä¢ –ù–æ–≤—ã–µ HR –ø–æ–ª–∏—Ç–∏–∫–∏\n‚Ä¢ –¶–∏—Ñ—Ä–æ–≤–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è", false);

      // Create code review example
      const codeSessionId = createNewChat("–†–µ–≤—å—é React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞");
      addMessage(codeSessionId, "–ü—Ä–æ–≤–µ—Ä—å —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ –æ—à–∏–±–∫–∏", true);
      addMessage(codeSessionId, "üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω:\n\n‚úÖ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:\n‚Ä¢ –•–æ—Ä–æ—à–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞\n‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ hooks\n\n‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å error boundaries\n‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å re-renders\n‚Ä¢ –£–ª—É—á—à–∏—Ç—å —Ç–∏–ø–∏–∑–∞—Ü–∏—é", false);
    }
  }, []);

  const toggleStar = (sessionId: string) => {
    const newStarred = new Set(starredSessions);
    if (newStarred.has(sessionId)) {
      newStarred.delete(sessionId);
    } else {
      newStarred.add(sessionId);
    }
    setStarredSessions(newStarred);
  };

  const filteredSessions = useMemo(() => {
    const sessions = Object.values(chatSessions);
    
    return sessions
      .filter((session) => {
        const matchesSearch = session.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                             session.messages.some(msg => 
                               msg.content.toLowerCase().includes(searchQuery.toLowerCase())
                             );
        
        const matchesFilter = selectedFilter === "all" || 
                             (selectedFilter === "starred" && starredSessions.has(session.id)) ||
                             (selectedFilter === "recent" && 
                              new Date().getTime() - session.createdAt.getTime() < 24 * 60 * 60 * 1000);
        
        return matchesSearch && matchesFilter;
      })
      .sort((a, b) => b.updatedAt.getTime() - a.updatedAt.getTime());
  }, [chatSessions, searchQuery, selectedFilter, starredSessions]);

  const getSessionPreview = (session: any) => {
    const lastMessage = session.messages[session.messages.length - 1];
    if (!lastMessage) return "–ù–æ–≤—ã–π —á–∞—Ç";
    const content = lastMessage.content;
    return content.length > 150 ? content.substring(0, 150) + "..." : content;
  };

  // Helper function to get conversation type icon
  const getConversationIcon = (session: any) => {
    const firstMessage = session.messages?.[0]?.content?.toLowerCase() || "";
    if (firstMessage.includes("–∞—É–¥–∏–æ") || firstMessage.includes("üé§")) {
      return <Mic className="h-4 w-4" />;
    } else if (firstMessage.includes("–¥–æ–∫—É–º–µ–Ω—Ç") || firstMessage.includes("üìä") || firstMessage.includes("—Ñ–∞–π–ª")) {
      return <FileText className="h-4 w-4" />;
    } else if (firstMessage.includes("–∫–æ–¥") || firstMessage.includes("—Ä–µ–≤—å—é")) {
      return <Bot className="h-4 w-4" />;
    }
    return <MessageCircle className="h-4 w-4" />;
  };

  const getRelativeTime = (date: Date) => {
    const now = new Date();
    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);
    
    if (diffInHours < 1) {
      return "–¢–æ–ª—å–∫–æ —á—Ç–æ";
    } else if (diffInHours < 24) {
      return `${Math.floor(diffInHours)} —á–∞—Å${Math.floor(diffInHours) === 1 ? '' : diffInHours < 5 ? '–∞' : '–æ–≤'} –Ω–∞–∑–∞–¥`;
    } else if (diffInHours < 48) {
      return "–í—á–µ—Ä–∞";
    } else {
      return formatDistanceToNow(date, { addSuffix: true, locale: ru });
    }
  };

  const handleSessionClick = (sessionId: string) => {
    setCurrentSessionId(sessionId);
    navigate('/dashboard');
  };

  const filters = [
    { id: "all", name: "–í—Å–µ —á–∞—Ç—ã", count: Object.keys(chatSessions).length },
    { id: "recent", name: "–ù–µ–¥–∞–≤–Ω–∏–µ", count: Object.values(chatSessions).filter(s => 
      new Date().getTime() - s.createdAt.getTime() < 24 * 60 * 60 * 1000).length },
    { id: "starred", name: "–ò–∑–±—Ä–∞–Ω–Ω—ã–µ", count: starredSessions.size }
  ];

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="space-y-4">
        <div>
          <h1 className="text-3xl font-bold text-foreground">–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤</h1>
          <p className="text-muted-foreground">–í—Å–µ –≤–∞—à–∏ –±–µ—Å–µ–¥—ã —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º</p>
        </div>

        {/* Search */}
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="–ü–æ–∏—Å–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10"
          />
        </div>

        {/* Filters */}
        <div className="flex gap-2">
          {filters.map((filter) => (
            <Button
              key={filter.id}
              variant={selectedFilter === filter.id ? "default" : "outline"}
              size="sm"
              onClick={() => setSelectedFilter(filter.id)}
            >
              {filter.name} ({filter.count})
            </Button>
          ))}
        </div>
      </div>

      {/* Chat Sessions */}
      <div className="space-y-4">
        {filteredSessions.length === 0 ? (
          <Card>
            <CardContent className="flex flex-col items-center justify-center py-12">
              <MessageSquare className="h-12 w-12 text-muted-foreground mb-4" />
              <h3 className="text-lg font-medium text-foreground mb-2">
                {searchQuery ? "–ß–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" : "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞"}
              </h3>
              <p className="text-muted-foreground text-center">
                {searchQuery 
                  ? "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"
                  : "–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–¥–µ—Å—å"
                }
              </p>
              {!searchQuery && (
                <Button className="mt-4" onClick={() => window.location.href = '/dashboard'}>
                  –ù–∞—á–∞—Ç—å —á–∞—Ç
                </Button>
              )}
            </CardContent>
          </Card>
        ) : (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
            {filteredSessions.map((session) => (
              <Card 
                key={session.id} 
                className="relative group hover:shadow-md transition-all duration-200 cursor-pointer border-muted/50 hover:border-primary/20"
                onClick={() => handleSessionClick(session.id)}
              >
                <CardHeader className="pb-3">
                  <div className="flex items-start justify-between">
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center gap-2 mb-1">
                        <div className="text-primary">
                          {getConversationIcon(session)}
                        </div>
                        <CardTitle className="text-base font-medium text-foreground truncate">
                          {session.title}
                        </CardTitle>
                      </div>
                      <CardDescription className="text-sm text-muted-foreground">
                        <Clock className="h-3 w-3 inline mr-1" />
                        {getRelativeTime(session.updatedAt)}
                      </CardDescription>
                    </div>
                    
                    {/* Action buttons - show on hover */}
                    <div className="opacity-0 group-hover:opacity-100 transition-opacity flex items-center gap-1">
                      <Button
                        variant="ghost"
                        size="icon"
                        className="h-8 w-8 hover:bg-muted"
                        onClick={(e) => {
                          e.stopPropagation();
                          toggleStar(session.id);
                        }}
                      >
                        {starredSessions.has(session.id) ? (
                          <Star className="h-4 w-4 text-yellow-400 fill-yellow-400" />
                        ) : (
                          <StarOff className="h-4 w-4" />
                        )}
                      </Button>
                      
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button
                            variant="ghost"
                            size="icon"
                            className="h-8 w-8 hover:bg-muted"
                            onClick={(e) => e.stopPropagation()}
                          >
                            <MoreVertical className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuItem
                            className="text-destructive"
                            onClick={(e) => {
                              e.stopPropagation();
                              deleteSession(session.id);
                            }}
                          >
                            <Trash2 className="h-4 w-4 mr-2" />
                            –£–¥–∞–ª–∏—Ç—å
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </div>
                  </div>
                </CardHeader>

                <CardContent className="pt-0">
                  <div className="space-y-3">
                    {/* Message count and last message info */}
                    <div className="flex items-center justify-between text-sm">
                      <div className="flex items-center gap-2 text-muted-foreground">
                        <MessageCircle className="h-4 w-4" />
                        <span>{session.messages?.length || 0} —Å–æ–æ–±—â–µ–Ω–∏–π</span>
                      </div>
                      {session.messages?.[session.messages.length - 1] && (
                        <div className="flex items-center gap-1 text-muted-foreground">
                          {session.messages[session.messages.length - 1].isUser ? (
                            <User className="h-3 w-3" />
                          ) : (
                            <Bot className="h-3 w-3" />
                          )}
                          <span className="text-xs">
                            {new Date(session.messages[session.messages.length - 1].timestamp).toLocaleTimeString([], {
                              hour: '2-digit',
                              minute: '2-digit'
                            })}
                          </span>
                        </div>
                      )}
                    </div>
                    
                    {/* Last message preview with better formatting */}
                    <div className="bg-muted/30 rounded-lg p-3 border-l-2 border-primary/30">
                      <p className="text-sm text-foreground line-clamp-3 leading-relaxed">
                        {getSessionPreview(session)}
                      </p>
                    </div>

                    {/* Quick tags based on conversation content */}
                    <div className="flex flex-wrap gap-1">
                      {session.messages?.some(m => m.content.includes("–¥–æ–∫—É–º–µ–Ω—Ç") || m.content.includes("üìä")) && (
                        <Badge variant="secondary" className="text-xs">
                          <FileText className="h-3 w-3 mr-1" />
                          –î–æ–∫—É–º–µ–Ω—Ç—ã
                        </Badge>
                      )}
                      {session.messages?.some(m => m.content.includes("–∞—É–¥–∏–æ") || m.content.includes("üé§")) && (
                        <Badge variant="secondary" className="text-xs">
                          <Mic className="h-3 w-3 mr-1" />
                          –ê—É–¥–∏–æ
                        </Badge>
                      )}
                      {session.messages?.some(m => m.content.toLowerCase().includes("hr") || m.content.includes("–æ—Ç–ø—É—Å–∫") || m.content.includes("–∫–∞–¥—Ä")) && (
                        <Badge variant="secondary" className="text-xs">
                          üë• HR
                        </Badge>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}